package main

//go:generate go run generate.go

import (
	"bytes"
	"fmt"
	"github.com/statping/statping/utils"
	"github.com/tdewolff/minify/v2"
	"github.com/tdewolff/minify/v2/html"
	"io/ioutil"
	"os"
	"os/exec"
)

func main() {
	fmt.Println("Generating success/failure email templates from MJML to a HTML golang constant")

	success := convertMJML("success.mjml")
	failure := convertMJML("failure.mjml")
	verify := convertMJML("verify.mjml")

	codeOut := `// Code generated by MJML on ` + utils.Now().String() + `, DO NOT EDIT.

package emails

const (
	` + constVar("Success", success) + `
	` + constVar("Failure", failure) + `
	` + constVar("Verify", verify) + `
)
`

	utils.SaveFile("emails/rendered.go", []byte(codeOut))
	createIndex()

	fmt.Println("Email MJML to HTML const saved: emails/rendered.go")
}

func createIndex() {
	out := `<html>
	<body>
	
<h1>Statping Email Templates</h1>
<p>
	<a href="failure.mjml.html">Service Failure Email</a>
</p>

<p>
	<a href="success.mjml.html">Service Online Email</a>
</p>

<p>
	<a href="verify.mjml.html">Verify Email</a>
</p>

<h1>Statping Email Images</h1>

<p>
<img width="650" src="https://assets.statping.com/greenbackground.png">
https://assets.statping.com/greenbackground.png
</p>

<p>
<img width="650" src="https://assets.statping.com/offlinebanner.png">
https://assets.statping.com/offlinebanner.png
</p>

<p>
<img src="https://assets.statping.com/iconlight.png">
https://assets.statping.com/iconlight.png
</p>

<p>
<img src="https://assets.statping.com/statpingcom.png">
https://assets.statping.com/statpingcom.png
</p>
	
	</body>
</html>`

	if err := ioutil.WriteFile("docs/index.html", []byte(out), os.FileMode(0755)); err != nil {
		panic(err)
	}
}

func constVar(key, data string) string {
	return fmt.Sprintf("%s = `%s`\n", key, data)
}

func minimize(val string) string {
	m := minify.New()
	m.Add("text/html", &html.Minifier{
		KeepDefaultAttrVals: true,
	})
	s, err := m.String("text/html", val)
	if err != nil {
		panic(err)
	}
	return s
}

func convertMJML(file string) string {
	w := bytes.NewBufferString("")
	fmt.Println("mjml", file)
	cmd := exec.Command("mjml", "./mjml/"+file, "-s")
	cmd.Stdout = w
	cmd.Start()
	cmd.Wait()

	out := minimize(w.String())
	ioutil.WriteFile("./docs/"+file+".html", []byte(out), os.FileMode(0755))
	return out
}
